#!/usr/bin/python

import os, sys, hashlib, json, base64, mimetypes, re, datetime, time, calendar, urllib, urllib2
from bs4 import BeautifulSoup
import mistune
import yaml
import jinja2 as jinja


# -------------------------------------
# Mime types 
# -------------------------------------

filemimes = dict(
    text = (
        'text/plain',
        'text/css',
        'text/html',
        'application/javascript',
        'application/x-javascript',
        'application/ecmascript',
        'text/javascript',
        'text/ecmascript',
        'text/rtf',
        'application/rtf',
        'application/x-rtf',
        'text/richtext',
        'application/xml',
        'application/atom+xml',
        'application/xhtml+xml',
        'application/json',
        'text/csv'
    ),

    image = (
        'image/vnd.microsoft.icon',
        'image/x-icon',
        'image/png',
        'image/gif',
        'image/jpeg',
        'image/bmp',
        'image/x-windows-bmp',
        'image/pict',
        'windows/metafile',
        'image/tiff',
        'image/svg+xml'
    ),

    audio = (
        'audio/aiff',
        'audio/x-aiff',
        'audio/basic',
        'audio/x-au',
        'audio/mpeg',
        'audio/x-mpeg',
        'audio/midi',
        'audio/x-mid',
        'audio/x-midi',
        'audio/mod',
        'audio/x-mod',
        'audio/mpeg3',
        'audio/x-mpeg-3',
        'audio/wav',
        'audio/x-wav',
        'audio/ogg',
        'audio/x-aac',
        'audio/mp4a-latm'
    ),

    video = (
        'video/x-ms-asf',
        'video/msvideo',
        'video/x-msvideo',
        'video/x-dv',
        'video/mpeg',
        'video/mp4',
        'video/quicktime',
        'video/x-sgi-movie',
        'video/ogg',
        'video/webm'
    )
)


# -------------------------------------
# Bloggen class 
# -------------------------------------

class Bloggen(object):
    settings = None
    datasite = None

    def __init__(self):
        pass

    def make(self,settings):
        postymls = []
        sortdates = []
        categories = []
        postdir = None

        settingsKeys = settings.keys()
        if 'postdir' not in settingsKeys:
            settings['postdir'] = './posts'
        if 'outputdir' not in settingsKeys:
            settings['outputdir'] = './output'
        if 'domain' not in settingsKeys:
            settings['domain'] = 'coolsite.me'
        if 'site_title' not in settingsKeys:
            settings['site_title'] = 'My cool website'
        if 'embeddedResources' not in settingsKeys:
            settings['embeddedResources'] = True
        if 'onlyJSON' not in settingsKeys:
            settings['onlyJSON'] = False
        if 'hasSSL' not in settingsKeys:
            settings['hasSSL'] = False
        
        settings['last_update'] = self.setTimestamp()
        self.settings = settings
        postdir = settings['postdir']
        platform = sys.platform

        postfullpath = os.path.abspath(postdir)
        if not os.path.exists(postfullpath):
            os.makedirs(postfullpath)

        print 'BLOGGEN [WAIT]: Working hard making your pages.' 

        for yml in os.listdir(postdir):
            yml_path = os.path.join(postdir,yml)
            
            if os.path.isfile(yml_path):
                yml_nam, yml_ext = os.path.splitext(yml)
                
                if yml_ext in ('.md','.markdown','.mdown','.mkdn','.mkd','.mdwn','.mdtxt','.mdtext','.text','.txt','.yml','.yaml','.yamel'):
                    html = self.slugify(yml_nam) + '.html'
                    https = 'https' if settings['hasSSL'] else 'http'
                    permalink = ''.join([https, '://', settings['domain'], '/', html])
                    dateorder = ''

                    with open(yml_path,'rt') as ymlfile:
                        yml_content = ymlfile.read()
                        content = str(yml_content).split('======================================================')
                        config = yaml.load(content[0])

                        config['file'] = html
                        config['id'] = hashlib.sha1(html).hexdigest()
                        config['permalink'] = permalink
                        config['content'] = content[1].strip()

                        published = os.path.getctime(yml_path)
                        modified = os.path.getmtime(yml_path)
                        if platform in ('linux','linux2'):
                           modified = str(datetime.datetime.fromtimestamp(modified))[:-7]
                           published = str(datetime.datetime.fromtimestamp(published))[:-7]
                        elif platform == 'darwin':
                           modified = str(datetime.datetime.fromtimestamp(modified))
                           published = str(datetime.datetime.fromtimestamp(published))

                        configKeys = config.keys()
                        if 'category' in configKeys:
                            categories.append(config['category'])
                        if 'date' in configKeys:
                            dateorder = config['date']
                            config['date'] = dict(
                                published = self.setTimestamp(config['date']),
                                modified = self.setTimestamp(modified),
                                order = str(dateorder)
                            )
                        else:
                            dateorder = time.strftime('%Y-%m-%d %H:%M:%S')
                            config['date'] = dict(
                                published = self.setTimestamp(published),
                                modified = self.setTimestamp(modified),
                                order = str(dateorder)
                            )

                        sortdates.append(config['date']['order'])
                        postymls.append(config)

                        print u'[OK]  ' + config['title']

        if len(postymls):
            sortdates = sorted(sortdates,reverse=True)
            categories = sorted(list(set(categories)))

            postymls_sorted = []
            for d in sortdates:
                for r,row in enumerate(postymls):
                    if row['date']['order'] == d:
                        postymls_sorted.append(row)

            self.datasite = dict(
                categories = categories,
                post = postymls_sorted,
                settings = dict(
                    domain = settings['domain'],
                    title = settings['site_title'],
                    author = settings['site_author'],
                    logo = settings['site_logo'],
                    last_update = settings['last_update'],
                    https = 'https' if settings['hasSSL'] else 'http'
                )
            )

            self.makeSiteFiles()
            print 'BLOGGEN [OK]: "' + settings['site_title'] + '" is ready.'
        else:
            print 'BLOGGEN [WARNING]: None post available. Write some and save it into the "' + os.path.realpath(postdir) + '" directory.'


    def makeSiteFiles(self):
        settings = self.settings
        datasite = self.datasite
        outputdir = self.settings['outputdir']
        datasite_json = None

        if not os.path.exists(outputdir):
            os.makedirs(outputdir)

        # Make the website json
        with open(os.path.join(outputdir,'allpost.json'),'w') as j:
            datjson = json.dumps(datasite,indent=2)
            j.write(datjson)

        # Make the website html
        if settings['onlyJSON'] != True:
            
            # Output sitemap.xml
            with open(os.path.join(outputdir,'sitemap.xml'),'w') as sitemap:
                dat = dict(
                    changefreq = 'weekly',
                    lastmod = str(datasite['settings']['last_update']).split(' ')[0],
                    site_domain = datasite['settings']['domain'],
                    site_author = datasite['settings']['author'],
                    site_logo = datasite['settings']['logo'],
                    https = datasite['settings']['https'],
                    categories = datasite['categories'],
                    rows = datasite['post']
                )
                tpl = tpls.get_template('sitemap.tpl').render(dat)

                sitemap.write(tpl)

            # Output index.html
            with open(os.path.join(outputdir,'index.html'),'w') as home:
                dat = dict(
                    site_domain = datasite['settings']['domain'],
                    site_title = datasite['settings']['title'],
                    site_author = datasite['settings']['author'],
                    site_logo = datasite['settings']['logo'],
                    https = datasite['settings']['https'],
                    categories = datasite['categories'],
                    keywords = ', '.join(datasite['categories']),
                    rows = datasite['post']
                )
                tpl = tpls.get_template('home.tpl').render(dat)

                if settings['embeddedResources']:
                    tpl = self.embeddedResources(tpl)

                home.write(tpl)

            # Output all post html
            for row in datasite['post']:
                dat = dict(
                    site_domain = datasite['settings']['domain'],
                    site_title = datasite['settings']['title'],
                    site_author = datasite['settings']['author'],
                    site_logo = datasite['settings']['logo'],
                    https = datasite['settings']['https'],
                    categories = datasite['categories'],
                    post = row
                )
                tpl = tpls.get_template(row['template']).render(dat)

                if settings['embeddedResources']:
                    tpl = self.embeddedResources(tpl)

                with open(os.path.join(outputdir,row['file']),'w') as page:
                    page.write(tpl)


    def embeddedResources(self,html=None):
        outputdir = self.settings['outputdir']
        htmlret = None

        if html is not None:
            htmlBS = '<pre>' + html.strip() + '</pre>'
            htmlBS = BeautifulSoup(htmlBS,'html.parser')

            for node in htmlBS.find_all(['img','link','script']):
                path = None

                if node.name == 'img':
                    src = node.get('src').strip()
                    path = os.path.join(outputdir,src)

                    if os.path.isfile(path):
                        node['src'] = self.filetoB64(src)

                if node.name == 'link':
                    href = node.get('href').strip()
                    path = os.path.join(outputdir,href)
                    rel = ','.join(node.get('rel')).lower()

                    if 'stylesheet' in rel:
                        if os.path.isfile(path):
                            with open(path,'rt') as f:
                                styles = '\n' + str(f.read())
                                node.extract()

                                new_style = htmlBS.new_tag('style')
                                new_style.append(styles)
                                htmlBS.head.append(new_style)

                    if 'icon' in rel:
                        if os.path.isfile(path):
                            node['href'] = self.filetoB64(href)

                if node.name == 'script':
                    src = node.get('src')

                    if src:
                        src = src.strip()
                        path = os.path.join(outputdir,src)

                        if os.path.isfile(path):
                            with open(path,'rt') as f:
                                jscript = '\n' + str(f.read())
                                node.append(jscript)
                                del node['src']

            genmeta = htmlBS.new_tag('meta')
            genmeta['name'] = 'generator'
            genmeta['content'] = 'bloggen'
            htmlBS.head.append(genmeta)

            htmlret = str(htmlBS.renderContents())[5:][:-6]

        return htmlret


    def filetoB64(self,sourcepath=None,raw=False):
        outputdir = self.settings['outputdir']
        fstring = None
        fmime = None
        b64 = None

        if sourcepath is not None:
            sourcepath = os.path.realpath(os.path.join(outputdir,sourcepath))

            if os.path.isfile(sourcepath):
                fmime = mimetypes.MimeTypes().guess_type(sourcepath)[0]
                
                if fmime in (filemimes['text'] + filemimes['image'] + filemimes['audio'] + filemimes['video']):
                    with open(sourcepath,'rb') as f:
                        fcontent = f.read()
                        fstring = base64.encodestring(fcontent).replace('\n','')

                        if raw:
                            b64 = fstring
                        else:
                            b64 = ''.join(['data:',fmime,';base64,',fstring])
                else:
                    b64 = sourcepath
            else:
                b64 = sourcepath

        return b64


    def setTimestamp(self,dte=None):
        res = None

        if dte:
            dte = str(dte).split(' ')
            dteLen = len(dte)
            dteDate = dte[0].split('-')
            
            if dteLen == 1:
                dte = datetime.datetime(int(dteDate[0]),int(dteDate[1]),int(dteDate[2]))
                
            if dteLen == 2:
                dteTime = dte[1].split(':')
                dte = datetime.datetime(int(dteDate[0]),int(dteDate[1]),int(dteDate[2]),int(dteTime[0]),int(dteTime[1]),int(dteTime[2]))
                
            res = str(dte).split(' ')
            res = res[0] + 'T' + res[1] + '+00:00'
            res = str(res)
        else:
            dte = time.strftime('%Y-%m-%dT%H:%M:%S+00:00')
            res = str(dte)

        return res


    def parsemd(self,mdstr=None,domain=None):
        html = mdstr

        if (mdstr is not None) and (domain is not None):
            mdstr = mdstr.strip()
            html = mistune.markdown(mdstr)
            
            htmlBS = BeautifulSoup(html,'html.parser')
            for anchor in htmlBS.find_all('a'):
                href = anchor['href']
                if (('http://' in href) or ('https://' in href)) and (domain not in href):
                    anchor['rel'] = 'nofollow'
                    anchor['target'] = '_blank'
            html = htmlBS.renderContents()

        return html


    def escapeText(self,text=None):
        s = text

        if text is not None:
            s = s.replace('á','a')
            s = s.replace('Á','A')
            s = s.replace('é','e')
            s = s.replace('É','E')
            s = s.replace('í','i')
            s = s.replace('Í','I')
            s = s.replace('ó','o')
            s = s.replace('Ó','O')
            s = s.replace('ú','u')
            s = s.replace('Ú','U')
            s = s.replace('ñ','n')
            s = s.replace('Ñ','N')

            s = s.replace('"','')
            s = s.replace("'","")
            s = s.replace('“','')
            s = s.replace('”','')
            s = s.replace('„','')
            s = s.replace('‘','')
            s = s.replace('’','')
            s = s.replace('«','')
            s = s.replace('»','')
            s = s.replace('\\','')
            s = s.replace('/','')
            s = s.replace('{','')
            s = s.replace('}','')
            s = s.replace('(','')
            s = s.replace(')','')
            s = s.replace('<','')
            s = s.replace('>','')
            s = s.replace('#','')
            s = s.replace(';','')
            s = s.replace('@','')
            s = s.replace(',','')
            s = s.replace('\s',' ')
            s = s.replace('\n',' ')

        return s


    def slugify(self,name=None):
        s = name

        if name is not None:
            s = name.lower()
            
            s = re.sub('á|à|â|ã|ä|å|ā|æ', 'a', s);
            s = re.sub('é|è|ê|ë|ē|ę', 'e', s);
            s = re.sub('í|î|ï|ī', 'i', s);
            s = re.sub('ó|õ|ô|ö|ő|ō|ø|œ', 'o', s);
            s = re.sub('ú|ü|û|ů|ű|ŭ|ū', 'u', s);

            s = re.sub('ç|č|ĉ|ć', 'c', s);
            s = re.sub('š|ŝ|ś|ş', 's', s);
            s = re.sub('ÿ|ý|ŷ', 'y', s);
            s = re.sub('ž|ź|ż', 'z', s);
            s = re.sub('ţ|ț', 't', s);
            s = re.sub('ñ|ň', 'n', s);
            s = re.sub('ř', 'r', s);
            s = re.sub('ĵ', 'j', s);
            s = re.sub('ğ', 'g', s);
            s = re.sub('ŵ', 'w', s);
            s = re.sub('ß', 'b', s);

            s = re.sub('([^\s\w]|_)+', '', s);
            s = re.sub('(\r\n|\n|\r|\s+)', '-', s);

        return s


    def humanizedDate(self,date=None):
        if date:
            months = ['January','February','March','April','May','June','July','August','September','October','November','December']

            dte = str(date).replace('T',' ').replace('+00:00','')
            dte = dte.split(' ')[0].split('-')
            month = months[int(dte[1])-1]
            date = ''.join([month,' ',dte[2],', ',dte[0]])

        return date


# -------------------------------------
# Setup & run
# -------------------------------------

reload(sys)  
sys.setdefaultencoding('utf8')

if __name__ == '__main__':
    with open('./config.json') as config_json:    
        config_data = json.load(config_json)

        tpls = jinja.Environment(
            loader = jinja.FileSystemLoader(os.path.abspath('templates')),
            autoescape = jinja.select_autoescape(['html','xml'])
        )
        tpls.filters = dict(
            parsemd = Bloggen().parsemd,
            slugify = Bloggen().slugify,
            humanizeddate = Bloggen().humanizedDate,
            escapetext = Bloggen().escapeText
        )

        Bloggen().make(config_data)

